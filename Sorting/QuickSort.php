<?php

function partition(&$array, $low, $high) {
    // Избираме последния елемент в сегашната част на масива като pivot
    $pivot = $array[$high];
    
    // Индекс на по-малкия елемент, който започва преди началото на текущата част
    $i = $low - 1;

    // Преминаваме през елементите между low и high (без pivot)
    for ($j = $low; $j < $high; $j++) {
        // Ако текущият елемент е по-малък или равен на pivot-а
        if ($array[$j] <= $pivot) {
            $i++;  // Увеличаваме индекса на по-малкия елемент
            
            // Разменяме местата на текущия елемент и елемента на позиция $i
            $temp = $array[$i];
            $array[$i] = $array[$j];
            $array[$j] = $temp;
        }
    }

    // Поставяме pivot на правилната му позиция, като го разменяме със следващия елемент след по-малките елементи
    $temp = $array[$i + 1];
    $array[$i + 1] = $array[$high];
    $array[$high] = $temp;

    // Връщаме индекса на pivot-а, който вече е на правилната си позиция
    return $i + 1;
}

function quicksort(&$array, $low = 0, $high = null) {
    // Ако high не е зададен, го правим да сочи към последния индекс на масива
    if ($high === null) {
        $high = count($array) - 1;
    }

    // Проверяваме дали има поне два елемента в сегашната част на масива
    if ($low < $high) {
        // Разделяме масива на две части и получаваме индекса на pivot-а
        $pivot_index = partition($array, $low, $high);

        // Рекурсивно сортираме частта на масива преди pivot-а
        quicksort($array, $low, $pivot_index - 1);

        // Рекурсивно сортираме частта на масива след pivot-а
        quicksort($array, $pivot_index + 1, $high);
    }
}

// Примерен масив за сортиране
$my_array = [11, 9, 12, 7, 3];

// Извикване на quicksort функцията за сортиране на масива
quicksort($my_array);

// Показване на сортирания масив
echo "Sorted array: " . implode(", ", $my_array) . "\n";